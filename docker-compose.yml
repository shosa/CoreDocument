# CoreDocument - Applicazione Gestione Documenti
# Usa i servizi condivisi da CoreServices

services:
  # Backend API (NestJS)
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: coredocument-backend
    restart: unless-stopped
    environment:
      # Database - usa il MySQL condiviso da CoreMachine
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@core-mysql:3306/${MYSQL_DATABASE}

      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}

      # MinIO - usa il MinIO condiviso da CoreMachine
      MINIO_ENDPOINT: core-minio
      MINIO_PORT: ${MINIO_PORT}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}

      # Meilisearch - usa il Meilisearch condiviso da CoreMachine
      MEILISEARCH_HOST: http://core-meilisearch:7700
      MEILISEARCH_API_KEY: ${MEILISEARCH_API_KEY}

      # App
      APP_PORT: ${APP_PORT}
      APP_URL: ${APP_URL}
      NODE_ENV: production
    ports:
      - "3003:3003"
    networks:
      - core-network  # Usa la network condivisa
    command: sh -c "npx prisma migrate deploy || true && node dist/main"

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    container_name: coredocument-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: production
    ports:
      - "3002:3000"
    depends_on:
      - backend
    networks:
      - core-network  # Usa la network condivisa

# Nginx Ã¨ gestito centralmente da CoreServices (core-nginx)
# Accesso: http://localhost:81

# Usa la network esterna creata da CoreServices
networks:
  core-network:
    external: true
    name: core-network
